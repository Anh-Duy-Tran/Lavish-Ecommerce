# Generated by Django 3.2.18 on 2023-03-20 12:52

from django.contrib.postgres.functions import RandomUUID
from django.db import migrations
from django.db.models import Case, When

BATCH_SIZE = 1000


def queryset_in_batches(queryset):
    """Slice a queryset into batches.

    Input queryset should be sorted be pk.
    """
    start_pk = 0

    while True:
        qs = queryset.filter(pk__gt=start_pk)[:BATCH_SIZE]
        pks = list(qs.values_list("pk", flat=True))

        if not pks:
            break

        yield pks

        start_pk = pks[-1]


def update_transaction_token_field_migration(apps, _schema_editor):
    TransactionItem = apps.get_model("payment", "TransactionItem")
    queryset = TransactionItem.objects.filter(token__isnull=True)
    for batch_pks in queryset_in_batches(queryset):
        TransactionItem.objects.filter(id__in=batch_pks).update(
            token=Case(When(token__isnull=True, then=RandomUUID()), default="token")
        )


class Migration(migrations.Migration):
    dependencies = [
        ("payment", "0042_auto_20230320_1252"),
    ]

    operations = [
        migrations.RunPython(
            update_transaction_token_field_migration,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
