# Generated by Django 3.2.13 on 2022-05-27 12:23

from django.db import migrations

from .. import TaxCalculationStrategy


AVATAX_PLUGIN_ID = "mirumee.taxes.avalara"
VATLAYER_ID = "mirumee.taxes.vatlayer"

CHECKOUT_CALCULATE_TAXES = "checkout_calculate_taxes"
ORDER_CALCULATE_TAXES = "order_calculate_taxes"


def add_tax_configuration_for_channels(apps, schema_editor):
    Channel = apps.get_model("channel", "Channel")
    TaxConfiguration = apps.get_model("tax", "TaxConfiguration")
    SiteSettings = apps.get_model("site", "SiteSettings")

    site_settings = SiteSettings.objects.first()
    tax_configurations = []

    for channel in Channel.objects.all():
        # For US channels create a configuration that's meaningful in US, where prices
        # as entered and displayed without tax.
        if channel.default_country == "US":
            display_gross_prices = False
            prices_entered_with_tax = False
        else:
            display_gross_prices = site_settings.display_gross_prices
            prices_entered_with_tax = site_settings.include_taxes_in_prices

        tax_configuration = TaxConfiguration(
            channel=channel,
            charge_taxes=True,
            display_gross_prices=display_gross_prices,
            prices_entered_with_tax=prices_entered_with_tax,
        )
        tax_configurations.append(tax_configuration)

    TaxConfiguration.objects.bulk_create(tax_configurations)


def populate_tax_calculation_strategy(apps, schema_editor):
    App = apps.get_model("app", "App")
    PluginConfiguration = apps.get_model("plugins", "PluginConfiguration")
    TaxConfiguration = apps.get_model("tax", "TaxConfiguration")

    def _get_tax_app():
        permissions = {}
        permissions["permissions__content_type__app_label"] = "checkout"
        permissions["permissions__codename"] = "handle_taxes"
        return App.objects.filter(
            is_active=True,
            webhooks__is_active=True,
            webhooks__events__event_type__in=[
                CHECKOUT_CALCULATE_TAXES,
                ORDER_CALCULATE_TAXES,
            ],
            **permissions,
        )

    # If there is any tax app enabled, turn on TAX_APP strategy for all channels.

    is_tax_app_enabled = _get_tax_app().exists()
    if is_tax_app_enabled:
        TaxConfiguration.objects.update(
            tax_calculation_strategy=TaxCalculationStrategy.TAX_APP
        )
        return

    # Set TAX_APP calculation strategy for the channels where Avalara is configured.
    # Set FLAT_RATES tax calculation strategy for channels where Vatlayer is enabled.

    avatax_configs = PluginConfiguration.objects.filter(
        active=True, identifier=AVATAX_PLUGIN_ID
    )
    avatax_tax_configs = []
    for config in avatax_configs:
        config_dict = {item["name"]: item["value"] for item in config.configuration}
        tc = config.channel.tax_configuration
        tc.tax_calculation_strategy = TaxCalculationStrategy.TAX_APP

        override_global_tax = config_dict.get("override_global_tax")
        # There might be a situation that the value is a string `true` or `false`,
        # so we need to handle such situation too
        if override_global_tax is True or override_global_tax == "true":
            include_taxes_in_prices = config_dict.get("include_taxes_in_prices")
            if include_taxes_in_prices is not None:
                tc.prices_entered_with_tax = (
                    include_taxes_in_prices
                    if isinstance(include_taxes_in_prices, bool)
                    else include_taxes_in_prices.lower() == "true"
                )

        avatax_tax_configs.append(tc)
    TaxConfiguration.objects.bulk_update(
        avatax_tax_configs, ["prices_entered_with_tax", "tax_calculation_strategy"]
    )

    vatlayer_channels = PluginConfiguration.objects.filter(
        active=True, identifier=VATLAYER_ID
    ).values_list("channel_id", flat=True)
    TaxConfiguration.objects.filter(channel_id__in=vatlayer_channels).update(
        tax_calculation_strategy=TaxCalculationStrategy.FLAT_RATES
    )


class Migration(migrations.Migration):
    dependencies = [
        ("app", "0017_app_audience"),
        ("channel", "0005_channel_allocation_strategy"),
        ("site", "0034_sitesettings_limit_quantity_per_checkout"),
        ("tax", "0001_initial"),
        ("plugins", "0010_auto_20220104_1239"),
        ("webhook", "0008_webhook_subscription_query"),
    ]

    operations = [
        migrations.RunPython(
            add_tax_configuration_for_channels,
            migrations.RunPython.noop,
        ),
        migrations.RunPython(
            populate_tax_calculation_strategy,
            migrations.RunPython.noop,
        ),
    ]
