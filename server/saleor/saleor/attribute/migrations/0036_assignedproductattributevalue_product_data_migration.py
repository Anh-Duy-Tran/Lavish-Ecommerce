# Generated by Django 3.2.20 on 2023-08-24 11:25

from django.db import migrations, transaction, connection


PRODUCT_BATCH_SIZE = 1000


def data_migration(apps, _schema_editor):
    AssignedProductAttributeValue = apps.get_model(
        "attribute", "AssignedProductAttributeValue"
    )
    while (
        AssignedProductAttributeValue.objects.filter(product__isnull=True)
        .values_list("pk", flat=True)
        .exists()
    ):
        update_product_assignment()


def update_product_assignment():
    """Assign product_id to a new field on assignedproductattributevalue.

    Take the values from attribute_assignedproductattribute to product_id.
    The old field has already been deleted in Django State operations so we need
    to use raw SQL to get the value and copy the assignment from the old table.
    """
    with transaction.atomic():
        with connection.cursor() as cursor:
            cursor.execute(
                """
                UPDATE attribute_assignedproductattributevalue
                SET product_id = (
                    SELECT product_id
                    FROM attribute_assignedproductattribute
                    WHERE attribute_assignedproductattributevalue.assignment_id = attribute_assignedproductattribute.id
                )
                WHERE id IN (
                    SELECT ID FROM attribute_assignedproductattributevalue
                    WHERE product_id IS NULL
                    ORDER BY ID DESC
                    FOR UPDATE
                    LIMIT %s
                );
                """,  # noqa
                [PRODUCT_BATCH_SIZE],
            )


class Migration(migrations.Migration):
    dependencies = [
        ("attribute", "0035_assignedproductattributevalue_product_add_index"),
    ]

    operations = [
        migrations.RunPython(data_migration, migrations.RunPython.noop),
    ]
